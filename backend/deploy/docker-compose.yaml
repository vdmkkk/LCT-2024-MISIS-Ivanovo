services:
  app:
    build:
      context: ../
      dockerfile: deploy/Dockerfile
    ports:
      - "8080:8080"
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: "postgres-database"
      ML_APP_HOST: "ml-app"
    depends_on:
      postgres-database:
        condition: service_healthy
    volumes:
      - ../../data/app:/app/cmd/log

  ml-app:
    build:
      context: ../../
      dockerfile: ml/Dockerfile
    ports:
      - "8000:8000"
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: "postgres-database"
    depends_on:
      postgres-database:
        condition: service_healthy

  storage-app:
    build:
      context: ../../
      dockerfile: storage/Dockerfile
    ports:
      - "8001:8001"
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: "postgres-database"
      API_KEY: "d347483b-506b-451a-8071-87074574be00"
    depends_on:
      postgres-database:
        condition: service_healthy

  postgres-database:
    image: postgres:latest
    env_file:
      - .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -p 5432" ]
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - ../../data/postgres:/var/lib/postgresql/data